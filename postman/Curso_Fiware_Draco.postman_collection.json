{
	"info": {
		"_postman_id": "7a6724c2-695f-4e3e-b053-e2f533d02aa1",
		"name": "Curso_Fiware_Draco",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DRACO PostgreSQL - Persisting Context",
			"item": [
				{
					"name": "Check",
					"item": [
						{
							"name": "get_IoT_Agent_version Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{iotagent_north}}/iot/about",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"about"
									]
								},
								"description": "http://82.223.70.251:1026/version/"
							},
							"response": []
						},
						{
							"name": "Draco - Check System Health",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{draco}}/nifi-api/system-diagnostics",
									"host": [
										"{{draco}}"
									],
									"path": [
										"nifi-api",
										"system-diagnostics"
									]
								},
								"description": "Once Draco is running, you can check the status by making an HTTP request to the exposed draco port to `/nifi-api/system-diagnostics`. If the response is blank, this is usually because Draco is not running or is listening on another port."
							},
							"response": []
						},
						{
							"name": "get_Orion_version Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orion}}/version/",
									"host": [
										"{{orion}}"
									],
									"path": [
										"version",
										""
									]
								},
								"description": "http://82.223.70.251:1026/version/"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "1) Create IoT Agent Service Copy",
					"item": [
						{
							"name": "Create_Service_Group_Multisensor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "fiware-service",
										"value": "{{service}}"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"MyKey0000001\",\n     \"cbroker\":     \"http://orion:1026\",\n     \"entity_type\": \"NodeArduino\",\n     \"resource\":    \"/iot/d\"\n   }\n ]\n}"
								},
								"url": {
									"raw": "{{iotagent_north}}/iot/services",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "List_services",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "{{service}}"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}"
									}
								],
								"url": {
									"raw": "{{iotagent_north}}/iot/services",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"services"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_service_MultiSensor",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "fiware-service",
										"value": "{{service}}"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{iotagent_north}}/iot/services/?resource=/iot/d&apikey=MyKey0000001",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"services",
										""
									],
									"query": [
										{
											"key": "resource",
											"value": "/iot/d"
										},
										{
											"key": "apikey",
											"value": "MyKey0000001"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "2) Create Device Copy",
					"item": [
						{
							"name": "Create_device_Multisensor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "fiware-service",
										"value": "{{service}}",
										"type": "text"
									},
									{
										"key": "fiware-servicePath",
										"value": " {{servicepath}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"devices\": [\n   {\n     \"device_id\":   \"ard001\",\n     \"entity_name\": \"urn:ngsi-ld:NodeArduino:ard001\",\n     \"entity_type\": \"NodeArduino\",\n     \"attributes\": [\n       { \"object_id\": \"t\", \"name\":\"temp\", \"type\":\"Number\"},\n       { \"object_id\": \"h\", \"name\":\"humid\", \"type\":\"Number\"}\n      ]\n   }\n ]\n}\n"
								},
								"url": {
									"raw": "{{iotagent_north}}/iot/devices",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "List_devices",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot_ul",
										"type": "text"
									},
									{
										"key": "fiware-servicepath",
										"value": "/",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{iotagent_north}}/iot/devices/",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"devices",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete_MultiSensor",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "fiware-service",
										"value": "openiot_ul",
										"type": "text"
									},
									{
										"key": "fiware-servicepath",
										"value": "/",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{iotagent_north}}/iot/devices/ard001",
									"host": [
										"{{iotagent_north}}"
									],
									"path": [
										"iot",
										"devices",
										"ard001"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Nodes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "fiware-service",
										"value": "openiot_ul"
									},
									{
										"key": "fiware-ServicePath",
										"value": "/"
									}
								],
								"url": {
									"raw": "{{orion}}/v2/entities",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Nodes",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "fiware-service",
										"value": "openiot_ul"
									},
									{
										"key": "fiware-ServicePath",
										"value": "/"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{orion}}/v2/entities/urn:ngsi-ld:NodeArduino:ard001?type=NodeArduino",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:NodeArduino:ard001"
									],
									"query": [
										{
											"key": "type",
											"value": "NodeArduino"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "3) Create Subscription to DRACO",
					"item": [
						{
							"name": "Orion - Subscribe to Context Changes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "fiware-service",
										"value": "{{service}}"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"Notify Draco of all context changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \".*\"\n      }\n    ]\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://draco:5050/v2/notify\"\n    }\n  },\n  \"throttling\": 1\n}"
								},
								"url": {
									"raw": "{{orion}}/v2/subscriptions/",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"subscriptions",
										""
									]
								},
								"description": "Once a dynamic context system is up and running, we need to inform **Draco** of changes in context.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that Draco will be informed of all context data changes.\n* The notification `url` must match the configured `NIFI_WEB_HTTP_PORT` and the URL the sync is listening on (usually  `/v2/notify`)\n* The `throttling` value defines the rate that changes are sampled.\n\nAs you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database."
							},
							"response": []
						},
						{
							"name": "Orion - Check Subscription is working",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "{{service}}",
										"type": "text"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{orion}}/v2/subscriptions",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"subscriptions"
									]
								},
								"description": "If a subscription has been created, you can check to see if it is firing by making a GET \nrequest to the `/v2/subscriptions` endpoint.\n\nWithin the `notification` section of the response, you can see several additional `attributes` which describe the health of the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`.\nA zero value would indicate that the `subject` of the subscription is incorrect or the subscription \nhas created with the wrong `fiware-service-path` or `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices\nare not regularly sending data. Remember to unlock the **Smart Door** and switch on the **Smart Lamp**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case \nthen **Draco** is not receiving the subscription properly. Check that the host name\nand port are correct. \n\nFinally, check that the `status` of the subscription is `active` - an expired subscription\nwill not fire."
							},
							"response": []
						},
						{
							"name": "Delete subscription",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "fiware-service",
										"value": "openiot_ul"
									},
									{
										"key": "fiware-ServicePath",
										"value": "/"
									}
								],
								"url": {
									"raw": "{{orion}}/v2/subscriptions/5df9f8892dbc4f1f20ab79fa",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"subscriptions",
										"5df9f8892dbc4f1f20ab79fa"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "4) Test: Sent Data From Sensors Copy",
					"item": [
						{
							"name": "Sent Measurement",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "t|28.00|p|968.93|h|48.73|a|438.35|lat|42.815320|lon|-1.649997"
								},
								"url": {
									"raw": "{{iotagent_south}}/iot/d?k=MyKey0000001&i=ard001",
									"host": [
										"{{iotagent_south}}"
									],
									"path": [
										"iot",
										"d"
									],
									"query": [
										{
											"key": "k",
											"value": "MyKey0000001"
										},
										{
											"key": "i",
											"value": "ard001"
										}
									]
								},
								"description": "This example simulates a request coming from the device `motion001`\n\nThe request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format\nand identifies the device `motion001` and passes a known API key.\n\nA similar request was made in the previous tutorial (before the IoT Agent was connected)\nwhen the door was unlocked, you will have seen the state of each motion sensor changing\nand a Northbound request will be logged in the device monitor."
							},
							"response": []
						},
						{
							"name": "Sent Measurement Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "t|23.00|p|933.93|h|43.73|a|433.35|lat|43.815320|lon|-1.349997"
								},
								"url": {
									"raw": "{{iotagent_south}}/iot/d?k=MyKey0000001&i=ard001",
									"host": [
										"{{iotagent_south}}"
									],
									"path": [
										"iot",
										"d"
									],
									"query": [
										{
											"key": "k",
											"value": "MyKey0000001"
										},
										{
											"key": "i",
											"value": "ard001"
										}
									]
								},
								"description": "This example simulates a request coming from the device `motion001`\n\nThe request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format\nand identifies the device `motion001` and passes a known API key.\n\nA similar request was made in the previous tutorial (before the IoT Agent was connected)\nwhen the door was unlocked, you will have seen the state of each motion sensor changing\nand a Northbound request will be logged in the device monitor."
							},
							"response": []
						},
						{
							"name": "Sent Measurement Copy Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "t|20.00|p|908.93|h|40.73|a|408.35|lat|40.815320|lon|-1.549997"
								},
								"url": {
									"raw": "{{iotagent_south}}/iot/d?k=MyKey0000001&i=ard001",
									"host": [
										"{{iotagent_south}}"
									],
									"path": [
										"iot",
										"d"
									],
									"query": [
										{
											"key": "k",
											"value": "MyKey0000001"
										},
										{
											"key": "i",
											"value": "ard001"
										}
									]
								},
								"description": "This example simulates a request coming from the device `motion001`\n\nThe request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format\nand identifies the device `motion001` and passes a known API key.\n\nA similar request was made in the previous tutorial (before the IoT Agent was connected)\nwhen the door was unlocked, you will have seen the state of each motion sensor changing\nand a Northbound request will be logged in the device monitor."
							},
							"response": []
						},
						{
							"name": "Context Broker - Read the Motion Sensor Copy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "fiware-service",
										"value": "{{service}}",
										"type": "text"
									},
									{
										"key": "fiware-servicepath",
										"value": "{{servicepath}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{orion}}/v2/entities/urn:ngsi-ld:NodeArduino:ard001",
									"host": [
										"{{orion}}"
									],
									"path": [
										"v2",
										"entities",
										"urn:ngsi-ld:NodeArduino:ard001"
									]
								},
								"description": "This example returns the data for the `Motion` entity with the `id=urn:ngsi-ld:Motion:001` within the context data.\n\nThe response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the\nentity `id=urn:ngsi-ld:Motion:001`. This new entity has been created within the context data. The `c` \nattribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute\nwithin the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the\nmeta data of the attribute - this represents the last time the entity and attribute have been updated, and is\nautomatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the\nIoT Agent was started up. The `refStore` attribute comes from the `static_attributes` set when the device was provisioned."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "To persist historic context data into an alternative database such as **PostgreSQL**, we will need an additional\ncontainer which hosts the PostgreSQL server - the default Docker image for this data can be used. The PostgreSQL\ninstance is listening on the standard `5432` port and the overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/postgres-draco-tutorial.png)\n\nWe now have a system with two databases, since the MongoDB container is still required to hold data related to the Orion\nContext Broker and the IoT Agent.\n\n## PostgreSQL - Database Server Configuration\n\n```yaml\npostgres-db:\n    image: postgres:latest\n    hostname: postgres-db\n    container_name: db-postgres\n    expose:\n        - \"5432\"\n    ports:\n        - \"5432:5432\"\n    networks:\n        - default\n    environment:\n        - \"POSTGRES_PASSWORD=password\"\n        - \"POSTGRES_USER=postgres\"\n        - \"POSTGRES_DB=postgres\"\n```\n\nThe `postgres-db` container is listening on a single port:\n\n-   Port `5432` is the default port for a PostgreSQL server. It has been exposed so you can also run the `pgAdmin4` tool\n    to display database data if you wish\n\nThe `postgres-db` container is driven by environment variables as shown:\n\n| Key               | Value.     | Description                               |\n| ----------------- | ---------- | ----------------------------------------- |\n| POSTGRES_PASSWORD | `password` | Password for the PostgreSQL database user |\n| POSTGRES_USER     | `postgres` | Username for the PostgreSQL database user |\n| POSTGRES_DB       | `postgres` | The name of the PostgreSQL database       |\n\n> :information_source: **Note:** Passing the Username and Password in plain text environment variables like this is a\n> security risk. Whereas this is acceptable practice in a tutorial, for a production environment, you can avoid this\n> risk by applying [Docker Secrets](https://blog.docker.com/2017/02/docker-secrets-management/)\n\n## PostgreSQL - Draco Configuration\n\n```yaml\ndraco:\n    image: ging/fiware-draco:1.1.0\n    container_name: draco\n    depends_on:\n        - postgres-db\n    environment:\n        - NIFI_WEB_HTTP_PORT=9090\n    ports:\n        - \"9090:9090\"\n        - \"5050:5050\"\n    healthcheck:\n        test: curl --fail -s http://localhost:9090/nifi-api/system-diagnostics || exit 1\n```\n\nThe `draco` container is listening on two ports:\n\n-   The Subscription Port for Draco - `5050` is where the service will be listening for notifications from the Orion\n    context broker\n-   The Web interface for Draco - `9090` is exposed purely for configuring the processors.\n\n## PostgreSQL - Start up\n\nTo start the system with a **PostgreSQL** database run the following command:\n\n```console\n./services postgres\n```\n\nThen go to your browser and open Draco using this URL `http://localhost:9090/nifi`\n\nNow go to the Components toolbar which is placed in the upper section of the NiFi GUI, find the template icon and drag\nand drop it inside the Draco user space. At this point, a popup should be displayed with a list of all the templates\navailable. Please select the template POSTGRESQL-TUTORIAL.\n\n![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/postgres-tutorial-template.png)\n\nBefore starting the processors, you need to set your PostgreSQL password and enable the DBCConnectionPool controller.\nFor doing that please follow the instructions:\n\n1.  Do right click on any part of the Draco GUI user space, and then click on configure.\n    ![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step1.png)\n\n2.  Go to the Controller Services Tab, at this point a list of controllers should be displayed, locate the\n    DBCConnectionPool controller.\n\n3.  Click on the configuration button of the \"DBCPConnectionPool\"\n    ![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step2.png)\n\n4.  Go to the controller Properties tab and put \"password\" in the password field, then apply the changes.\n    ![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/controller-postgresql.png)\n\n5.  Enable the processor by clicking on the thunder icon and then click on enable, then close the controller\n    configuration page.\n\n![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step4.png)\n\n![](https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step5.png)\n\n6.  Select all the processors (press shift and click on every processor) and start them by clicking on the start button.\n    Now, you can see that the status icon of each processor turned from red to green.\n\n\n\n\n## PostgreSQL - Start up\n\nTo start the system with a **PostgreSQL** database run the following command:\n\n```console\n./services postgres\n``` \n\n## PostgreSQL- Database Server Configuration\n\n```yaml\npostgres-db:\n      image: postgres:latest\n      hostname: postgres-db\n      container_name: db-postgres\n      expose:\n        - \"5432\"\n      ports:\n        - \"5432:5432\"\n      networks:\n        - default\n      environment:\n        - \"POSTGRES_PASSWORD=password\"\n        - \"POSTGRES_USER=postgres\"\n        - \"POSTGRES_DB=postgres\"\n\n```\n\nThe `postgres-db` container is listening on a single port: \n\n* Port `5432` is the default port for a PostgreSQL server. It has been exposed so you can also run the `pgAdmin4` tool to display database data if you wish\n\nThe `postgres-db` container is driven by environment variables as shown:\n\n| Key             |Value.    |Description                    |\n|-----------------|----------|-------------------------------|\n|POSTGRES_PASSWORD|`password`| Password for the PostgreSQL database user|\n|POSTGRES_USER    |`postgres`| Username for the PostgreSQL database user|\n|POSTGRES_DB      |`postgres`| The name of the PostgreSQL database      | \n\n\n\n## PostgreSQL - Draco Configuration\n\n```yaml\ndraco:\n    image: fiware/draco-ngsi:latest\n    hostname: draco\n    container_name: fiware-draco\n    networks:\n        - default\n    depends_on:\n        - postgres-db\n    expose:\n        - \"5080\"\n    ports:\n        - \"5050:5050\"\n        - \"5080:5080\"\n    environment:\n        - \"CYGNUS_POSTGRESQL_HOST=postgres-db\"\n        - \"CYGNUS_POSTGRESQL_PORT=5432\"\n        - \"CYGNUS_POSTGRESQL_USER=postgres\" \n        - \"CYGNUS_POSTGRESQL_PASS=password\" \n        - \"CYGNUS_LOG_LEVEL=DEBUG\"\n        - \"CYGNUS_SERVICE_PORT=5050\"\n        - \"CYGNUS_API_PORT=5080\"\n        - \"CYGNUS_POSTGRESQL_ENABLE_CACHE=true\"\n```\n\nThe `draco` container is listening on two ports: \n\n* The service will be listening on port `5050` for notifications from the Orion context broker\n* Port `5080` is exposed purely for tutorial access - so that cUrl or Postman can make provisioning commands\n  without being part of the same network.\n\n\n### Generating Context Data\n\nFor the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated.\nThe dummy IoT Sensors can be used to do this. Open the device monitor page at `http://localhost:3000/device/monitor`\nand unlock a **Smart Door** and switch on a **Smart Lamp**. This can be done by selecting an appropriate the command \nfrom the drop down list and pressing the `send` button. The stream of measurements coming from the devices can then\nbe seen on the same page:\n\n![](https://fiware.github.io/tutorials.Historic-Context/img/door-open.gif)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8ca5d71-4eb4-42b9-95e0-c3ef11567514",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "43d701ab-eb41-472e-875e-4ac51e27579a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}